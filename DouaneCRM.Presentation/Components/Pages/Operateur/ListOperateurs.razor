@page "/list-operateurs"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Internal
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner


<style>
    .e-grid .e-rowcell.e-selectionbackground {
        background-color: #6aaa37;
        color: white !important;
        font-weight: bold;
    }

    .e-toast-container .e-toast {
        background-color: #6aaa37;
    }

    .e-toast-container .e-toast .e-toast-message .e-toast-content {
        color: white;
        font-size: 13px;
        font-weight: normal;
    }

    .e-toast-container .e-toast .e-toast-message .e-toast-title {
        color: white;
        font-size: 18px;
        font-weight: bold;
    }

    .e-card {
        padding: 20px;
        margin: 10px;
    }

     .e-card .e-card-header .e-card-header-caption .e-card-header-title {
         font-size: large;
         font-weight: bold;
         margin-bottom: 1%;
     }

</style>

<PageTitle>Opérateurs</PageTitle>

<SfToast @ref="ToastObj">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

<SfDialog @ref="ConfirmDialog" Width="400px" IsModal="true" ShowCloseIcon="true" Visible="false"
          Content="Êtes-vous sûr de vouloir supprimer cet opérateur ?" Header="Confirmer la suppression">
    <DialogButtons>
        <DialogButton IsPrimary="true" Content="Ok" OnClick="@OnConfirmDelete" />
        <DialogButton Content="Annuler" OnClick="@OnCancelDelete" />
    </DialogButtons>
</SfDialog>
<SfCard>
    <CardHeader Title="Liste operateurs" />
    <SfGrid Height="200" DataSource="@Operateurs" TValue="Operateur" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowExcelExport="true"
            Toolbar="@(new List<string> { "Add", "Edit", "Delete", "Update", "Cancel", "Search", "ExcelExport" })"
            EditSettings="@EditSettings" @ref="OperateursGrid">
        <GridEvents Created="fetchData" OnToolbarClick="OnToolbarClickHandler" OnActionBegin="OnActionBeginAsync" OnActionComplete="OnActionCompleteAsync" TValue="Operateur"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridColumns>
            <GridColumn Field="Nom" HeaderText="Nom" Width="150" ValidationRules="@(new ValidationRules { Required = true })"></GridColumn>
            <GridColumn Field="RC" HeaderText="RC" Width="120"></GridColumn>
            <GridColumn Field="IF" HeaderText="IF" Width="120"></GridColumn>
            <GridColumn Field="Telephone" HeaderText="Téléphone" Width="150"></GridColumn>
            <GridColumn Field="Email" HeaderText="Email" Width="200"></GridColumn>
            <GridColumn Field="ActivitePrincipale" HeaderText="Activité Principale" Width="180"></GridColumn>
            <GridColumn Field="StatutDouanier" HeaderText="Statut Douanier" Width="150"></GridColumn>
        </GridColumns>
        <SfSpinner @bind-Visible="@VisibleProperty"></SfSpinner>
    </SfGrid>
</SfCard>

@code {

    public class Operateur
    {
        public int IdOperateur { get; set; }
        public string Nom { get; set; }
        public string RC { get; set; }
        public string IF { get; set; }
        public string Adresse { get; set; }
        public string Telephone { get; set; }
        public string Email { get; set; }
        public string ActivitePrincipale { get; set; }
        public string StatutDouanier { get; set; }
    }
    private List<Operateur>? Operateurs;
    private SfGrid<Operateur> OperateursGrid = null!;
    private SfToast ToastObj = null!;
    private SfDialog ConfirmDialog = null!;
    private ActionEventArgs<Operateur>? PendingDeleteArgs;
    private bool VisibleProperty { get; set; } = false;

    private GridEditSettings EditSettings = new()
    {
        AllowAdding = true,
        AllowEditing = true,
        AllowDeleting = true,
        Mode = EditMode.Dialog
    };

    private async Task fetchData()
    {
        VisibleProperty = true;
        //Operateurs = await OperateurService.GetAllAsync();
        Operateurs = Enumerable.Range(1, 5).Select(x => new Operateur()
        {
            IdOperateur = x,
            Nom = $"Opérateur {x}",
            RC = $"RC{x:000}",
            IF = $"IF{x:000}",
            Adresse = $"Adresse {x}",
            Telephone = $"06000000{x}",
            Email = $"op{x}@test.com",
            ActivitePrincipale = "Commerce",
            StatutDouanier = x % 2 == 0 ? "Actif" : "Suspendu"
        }).ToList();
        VisibleProperty = false;
    }

    private async Task OnToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item?.Id?.Contains("_excelexport") == true)
        {
            await OperateursGrid.ExportToExcelAsync();
        }
    }

    private async Task OnActionBeginAsync(ActionEventArgs<Operateur> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            // if (args.Data == null)
            // {
            //     args.Cancel = true;
            //     await ShowToastAsync("Erreur : données manquantes.", "Erreur");
            //     return;
            // }

            // var validationContext = new ValidationContext(args.Data);
            // var validationResults = new List<ValidationResult>();
            // bool isValid = Validator.TryValidateObject(args.Data, validationContext, validationResults, true);

            // if (!isValid)
            // {
            //     string messages = string.Join(", ", validationResults.Select(r => r.ErrorMessage));
            //     await ShowToastAsync($"Validation échouée: {messages}", "Erreur");
            //     await OperateursGrid.CloseEditAsync();
            //     args.Cancel = true;
            // }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            if (args.Data != null)
            {
                PendingDeleteArgs = args;
                await ConfirmDialog.ShowAsync();
                args.Cancel = true;
            }
        }
    }

    private async Task OnActionCompleteAsync(ActionEventArgs<Operateur> args)
    {
        // if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Data != null)
        // {
        //     if (args.Action == "Add")
        //     {
        //         await OperateurService.AddAsync(args.Data);
        //         await ShowToastAsync("Opérateur ajouté avec succès.", "Succès");
        //     }
        //     else if (args.Action == "Edit")
        //     {
        //         await OperateurService.UpdateAsync(args.Data);
        //         await ShowToastAsync("Opérateur mis à jour.", "Succès");
        //     }
        //     Operateurs = await OperateurService.GetAllAsync();
        //     StateHasChanged();
        // }
    }

    private async Task OnConfirmDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        // if (PendingDeleteArgs?.Data != null)
        // {
        //     await OperateurService.DeleteAsync(PendingDeleteArgs.Data.IdOperateur);
        //     await ShowToastAsync("Opérateur supprimé.", "Succès");
        //     Operateurs?.Remove(PendingDeleteArgs.Data);
        //     await OperateursGrid.Refresh();
        // }
        // await ConfirmDialog.HideAsync();
    }

    private async Task OnCancelDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        await ConfirmDialog.HideAsync();
    }

    private async Task ShowToastAsync(string message, string title)
    {
        await ToastObj.ShowAsync(new ToastModel
        {
            Content = message,
            Title = title,
            CssClass = title == "Succès" ? "e-toast-success" : "e-toast-danger",
            Icon = title == "Succès" ? "e-success toast-icons" : "e-error toast-icons",
            Timeout = 3000
        });
    }
}

