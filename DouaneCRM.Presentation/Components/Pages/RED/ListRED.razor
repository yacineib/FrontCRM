@page "/list-reds"
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns

<style>
    .e-grid .e-rowcell.e-selectionbackground {
        background-color: #6aaa37;
        color: white !important;
        font-weight: bold;
    }

    .e-toast-container .e-toast {
        background-color: #6aaa37;
    }

        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-size: 13px;
            font-weight: normal;
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-size: 18px;
            font-weight: bold;
        }

    .e-card {
        padding: 20px;
        margin: 10px;
    }

        .e-card .e-card-header .e-card-header-caption .e-card-header-title {
            font-size: large;
            font-weight: bold;
            margin-bottom: 1%;
        }
</style>

<PageTitle>Liste RED</PageTitle>

<SfToast @ref="ToastObj">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

<SfDialog @ref="ConfirmDialog" Width="400px" IsModal="true" ShowCloseIcon="true" Visible="false"
          Content="Êtes-vous sûr de vouloir supprimer ce RED ?" Header="Confirmer la suppression">
    <DialogButtons>
        <DialogButton IsPrimary="true" Content="Ok" OnClick="@OnConfirmDelete" />
        <DialogButton Content="Annuler" OnClick="@OnCancelDelete" />
    </DialogButtons>
</SfDialog>

<SfCard>
    <CardHeader Title="Liste REDs" />
    <SfGrid Height="200" DataSource="@REDs" TValue="RED" AllowSorting="true" AllowFiltering="true" AllowPaging="true"
            Toolbar="@(new List<string> { "Add", "Edit", "Delete", "Search" })"
            EditSettings="@EditSettings" @ref="REDsGrid">
        <GridEvents Created="fetchData" OnActionBegin="OnActionBeginAsync" OnActionComplete="OnActionCompleteAsync" TValue="RED"></GridEvents>

        <GridColumns>
            <GridColumn Field="IdRED" Visible="false" HeaderText="ID" IsPrimaryKey="true"></GridColumn>
            <GridColumn Field="NumeroCompte" HeaderText="Numéro Compte" Width="120" ValidationRules="@(new ValidationRules { Required = true })"></GridColumn>
            <GridColumn Field="Regime" HeaderText="Régime" Width="100"></GridColumn>
            <GridColumn Field="BureauDouanier" HeaderText="Bureau Douanier" Width="130"></GridColumn>
            <GridColumn Field="DateOuverture" HeaderText="Date Ouverture" Type="ColumnType.Date" Format="d" Width="130"></GridColumn>
            <GridColumn Field="DateEcheance" HeaderText="Date Échéance" Type="ColumnType.Date" Format="d" Width="130"></GridColumn>
            <GridColumn Field="ValeurInitiale" HeaderText="Valeur Initiale" Format="DH #,##0.00" Width="130"></GridColumn>
            <GridColumn Field="SoldeTheorique" HeaderText="Solde Théorique" Width="130" Format="DH #,##0.00"></GridColumn>

            <GridColumn Field="OperateurId" HeaderText="Opérateur" Width="150">
                <Template>
                    @{
                        var op = OperateursList.FirstOrDefault(o => o.IdOperateur == (context as RED)?.OperateurId);
                        var nom = op?.Nom ?? "Inconnu";
                    }
                    <span>@nom</span>
                </Template>
                <EditTemplate>
                    <SfDropDownList TItem="Operateur"
                                    TValue="int"
                                    DataSource="@OperateursList"
                                    Placeholder="Opérateur"
                                    FloatLabelType="FloatLabelType.Always"
                                    @bind-Value="(context as RED).OperateurId">
                        <DropDownListFieldSettings Text="Nom" Value="IdOperateur"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
        </GridColumns>

        <SfSpinner @bind-Visible="@VisibleProperty"></SfSpinner>
    </SfGrid>
</SfCard>

@code {
    private List<RED>? REDs;
    private List<Operateur> OperateursList = new();
    private SfGrid<RED> REDsGrid = null!;
    private SfToast ToastObj = null!;
    private SfDialog ConfirmDialog = null!;
    private ActionEventArgs<RED>? PendingDeleteArgs;
    private bool VisibleProperty { get; set; } = false;

    private GridEditSettings EditSettings = new()
    {
        AllowAdding = true,
        AllowEditing = true,
        AllowDeleting = true,
        Mode = EditMode.Dialog
    };

    protected override void OnInitialized()
    {
        GenerateDummyData();
    }

    private void GenerateDummyData()
    {
        // Generate some random Operateurs
        OperateursList = new List<Operateur>
        {
            new Operateur { IdOperateur = 1, Nom = "Opérateur Alpha" },
            new Operateur { IdOperateur = 2, Nom = "Opérateur Beta" },
            new Operateur { IdOperateur = 3, Nom = "Opérateur Gamma" }
        };

        // Generate some random REDs
        var random = new Random();
        REDs = Enumerable.Range(1, 10).Select(index => new RED
        {
            IdRED = index,
            NumeroCompte = $"RED-{1000 + index}",
            Regime = "Admission Temporaire",
            BureauDouanier = "Casablanca Port",
            DateOuverture = DateTime.Now.AddDays(-random.Next(100, 500)),
            DateEcheance = DateTime.Now.AddDays(random.Next(100, 500)),
            ValeurInitiale = (decimal)(random.Next(10000, 500000) + random.NextDouble()),
            SoldeTheorique = (decimal)(random.Next(1000, 50000) + random.NextDouble()),
            OperateurId = random.Next(1, 4) // Assigns a random Opérateur
        }).ToList();
    }

    private async Task fetchData()
    {
        // This method will be called after the grid is created.
        // For this example, we've already populated the data in OnInitialized.
        // If you were using a service, this is where you'd call it.
    }

    private async Task OnActionBeginAsync(ActionEventArgs<RED> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Data != null)
        {
            if (string.IsNullOrWhiteSpace(args.Data.NumeroCompte))
            {
                await ShowToastAsync("Le champ 'Numéro Compte' est requis.", "Erreur");
                args.Cancel = true;
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete && args.Data != null)
        {
            PendingDeleteArgs = args;
            await ConfirmDialog.ShowAsync();
            args.Cancel = true;
        }
    }

    private async Task OnActionCompleteAsync(ActionEventArgs<RED> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Data != null)
        {
            // Simulate saving data to a service
            if (args.Action == "Add")
            {
                // REDs.Add(args.Data); // In a real app, the service would handle this
                await ShowToastAsync("RED ajouté avec succès.", "Succès");
            }
            else if (args.Action == "Edit")
            {
                // In a real app, you would find and update the item
                await ShowToastAsync("RED mis à jour.", "Succès");
            }
            StateHasChanged();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // The actual deletion happens in OnConfirmDelete, this is just for the toast.
            await ShowToastAsync("RED supprimé avec succès.", "Succès");
        }
    }

    private async Task OnConfirmDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        if (PendingDeleteArgs?.Data != null)
        {
            REDs?.Remove(PendingDeleteArgs.Data);
            await REDsGrid.Refresh();
            await ShowToastAsync("RED supprimé.", "Succès");
        }
        await ConfirmDialog.HideAsync();
    }

    private async Task OnCancelDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        await ConfirmDialog.HideAsync();
    }

    private async Task ShowToastAsync(string message, string title)
    {
        await ToastObj.ShowAsync(new ToastModel
        {
            Content = message,
            Title = title,
            CssClass = title == "Succès" ? "e-toast-success" : "e-toast-danger",
            Icon = title == "Succès" ? "e-success toast-icons" : "e-error toast-icons",
            Timeout = 3000
        });
    }

    public class RED
    {
        public int IdRED { get; set; }
        public string NumeroCompte { get; set; }
        public string Regime { get; set; }
        public string BureauDouanier { get; set; }
        public DateTime DateOuverture { get; set; }
        public DateTime DateEcheance { get; set; }
        public decimal ValeurInitiale { get; set; }
        public decimal SoldeTheorique { get; set; }
        public int OperateurId { get; set; }
    }

    public class Operateur
    {
        public int IdOperateur { get; set; }
        public string Nom { get; set; }
    }
}