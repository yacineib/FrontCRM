@page "/list-controles"

@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel.DataAnnotations

<style>
    .e-grid .e-rowcell.e-selectionbackground {
        background-color: #6aaa37;
        color: white !important;
        font-weight: bold;
    }

    .e-toast-container .e-toast {
        background-color: #6aaa37;
    }

        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-size: 13px;
        }

        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-size: 18px;
            font-weight: bold;
        }

    .e-card {
        padding: 20px;
        margin: 10px;
    }

        .e-card .e-card-header .e-card-header-caption .e-card-header-title {
            font-size: large;
            font-weight: bold;
            margin-bottom: 1%;
        }
</style>

<PageTitle>Contrôles</PageTitle>

<SfToast @ref="ToastObj">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

<SfDialog @ref="ConfirmDialog" Width="400px" IsModal="true" ShowCloseIcon="true" Visible="false"
          Content="Êtes-vous sûr de vouloir supprimer ce contrôle ?" Header="Confirmation de suppression">
    <DialogButtons>
        <DialogButton IsPrimary="true" Content="Ok" OnClick="@OnConfirmDelete" />
        <DialogButton Content="Annuler" OnClick="@OnCancelDelete" />
    </DialogButtons>
</SfDialog>

<SfCard>
    <CardHeader Title="Liste des contrôles" />
    <SfGrid Height="300" DataSource="@Controles" AllowSorting="true" AllowFiltering="true" AllowPaging="true"
            Toolbar="@(new List<string> { "Add", "Edit", "Delete", "Update", "Cancel", "Search", "ExcelExport" })"
            EditSettings="@EditSettings" @ref="ControlesGrid">
        <GridEvents Created="fetchData" OnToolbarClick="OnToolbarClickHandler" OnActionBegin="OnActionBeginAsync" OnActionComplete="OnActionCompleteAsync" TValue="Controle"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridColumns>
            <GridColumn Field="IdControle" Visible="false" IsPrimaryKey="true"></GridColumn>

            <GridColumn Field="TypeControle" HeaderText="Type de contrôle" Width="150">
                <EditTemplate>
                    <SfDropDownList TValue="string" TItem="string"
                                    DataSource="@(new List<string>{ "Douanier", "Qualité", "Sécurité" })"
                                    @bind-Value="(context as Controle).TypeControle">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>

            <GridColumn Field="DateControle" HeaderText="Date" Width="120" Type="ColumnType.Date" Format="yyyy-MM-dd"></GridColumn>
            <GridColumn Field="Resultat" HeaderText="Résultat" Width="200"></GridColumn>

            <GridColumn Field="OperateurId" HeaderText="Opérateur" Width="150">
                <Template>
                    @{
                        var op = Operateurs.FirstOrDefault(o => o.IdOperateur == (context as Controle)?.OperateurId);
                        <span>@(op?.Nom ?? "Unknown")</span>
                    }
                </Template>
                <EditTemplate>
                    <SfDropDownList TItem="Operateur" TValue="int"
                                    DataSource="@Operateurs"
                                    Placeholder="Sélectionner un opérateur"
                                    @bind-Value="(context as Controle).OperateurId">
                        <DropDownListFieldSettings Text="Nom" Value="IdOperateur"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>

            <GridColumn Field="AgentId" HeaderText="Agent" Width="150">
                <Template>
                    @{
                        var agent = Agents.FirstOrDefault(a => a.IdAgent == (context as Controle)?.AgentId);
                        <span>@(agent?.Nom ?? "Unknown")</span>
                    }
                </Template>
                <EditTemplate>
                    <SfDropDownList TItem="Agent" TValue="int"
                                    DataSource="@Agents"
                                    Placeholder="Sélectionner un agent"
                                    @bind-Value="(context as Controle).AgentId">
                        <DropDownListFieldSettings Text="Nom" Value="IdAgent"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
        </GridColumns>
        <SfSpinner @bind-Visible="@VisibleProperty"></SfSpinner>
    </SfGrid>
</SfCard>

@code {
    public class Controle
    {
        public int IdControle { get; set; }
        public string TypeControle { get; set; }
        public DateTime DateControle { get; set; }
        public string Resultat { get; set; }
        public int OperateurId { get; set; }
        public int AgentId { get; set; }
    }

    public class Operateur
    {
        public int IdOperateur { get; set; }
        public string Nom { get; set; }
    }

    public class Agent
    {
        public int IdAgent { get; set; }
        public string Nom { get; set; }
    }

    private List<Controle>? Controles;
    private List<Operateur> Operateurs = new();
    private List<Agent> Agents = new();
    private SfGrid<Controle> ControlesGrid = null!;
    private SfToast ToastObj = null!;
    private SfDialog ConfirmDialog = null!;
    private ActionEventArgs<Controle>? PendingDeleteArgs;
    private bool VisibleProperty { get; set; }

    private GridEditSettings EditSettings = new()
    {
        AllowAdding = true,
        AllowEditing = true,
        AllowDeleting = true,
        Mode = EditMode.Dialog
    };

    private async Task fetchData()
    {
        Operateurs = new List<Operateur> {
            new() { IdOperateur=1, Nom="Opérateur A" },
            new() { IdOperateur=2, Nom="Opérateur B" }
        };
        Agents = new List<Agent> {
            new() { IdAgent=1, Nom="Agent X" },
            new() { IdAgent=2, Nom="Agent Y" }
        };
        Controles = new List<Controle> {
            new() { IdControle=1, TypeControle="Douanier", DateControle=DateTime.Now.AddDays(-10), Resultat="Conforme", OperateurId=1, AgentId=1 },
            new() { IdControle=2, TypeControle="Qualité", DateControle=DateTime.Now.AddDays(-5), Resultat="Non conforme", OperateurId=2, AgentId=2 }
        };
    }

    private async Task OnToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item?.Id?.Contains("_excelexport") == true)
            await ControlesGrid.ExportToExcelAsync();
    }

    private async Task OnActionBeginAsync(ActionEventArgs<Controle> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Data != null)
            {
                var context = new ValidationContext(args.Data);
                var results = new List<ValidationResult>();
                if (!Validator.TryValidateObject(args.Data, context, results, true))
                {
                    await ShowToastAsync("Validation échouée: " + string.Join(", ", results.Select(r => r.ErrorMessage)), "Erreur");
                    args.Cancel = true;
                }
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            if (args.Data != null)
            {
                PendingDeleteArgs = args;
                await ConfirmDialog.ShowAsync();
                args.Cancel = true;
            }
        }
    }

    private async Task OnActionCompleteAsync(ActionEventArgs<Controle> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Data != null)
        {
            if (args.Action == "Add")
            {
                await ShowToastAsync("Contrôle ajouté avec succès.", "Succès");
            }
            else if (args.Action == "Edit")
            {
                await ShowToastAsync("Contrôle mis à jour avec succès.", "Succès");
            }
            StateHasChanged();
        }
    }

    private async Task OnConfirmDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        if (PendingDeleteArgs?.Data != null)
        {
            Controles?.Remove(PendingDeleteArgs.Data);
            await ControlesGrid.Refresh();
            await ShowToastAsync("Contrôle supprimé avec succès.", "Succès");
        }
        await ConfirmDialog.HideAsync();
    }

    private async Task OnCancelDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        await ConfirmDialog.HideAsync();
    }

    private async Task ShowToastAsync(string message, string title)
    {
        await ToastObj.ShowAsync(new ToastModel
        {
            Content = message,
            Title = title,
            CssClass = title == "Succès" ? "e-toast-success" : "e-toast-danger",
            Icon = title == "Succès" ? "e-success toast-icons" : "e-error toast-icons",
            Timeout = 3000
        });
    }
}
